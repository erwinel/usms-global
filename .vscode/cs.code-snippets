{
    "Define LoggerMessage w/ no args": {
        "prefix": "logger-message0",
		"body": [
            "#region ${1:EventName} event logger message (0x${2:HexNumber})",
            "",
			"public const int EVENT_ID_${1} = 0x${2};",
            "",
			"public static readonly EventId ${1} = new(EVENT_ID_${1}, nameof(${1}));",
            "",
			"private static readonly Action<ILogger, Exception?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/} = LoggerMessage.Define(LogLevel.${3:Critical|Error|Warning|Information|Trace|Debug}, ${1},",
			"    \"${4:Message}\");",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.${3}\"/> message for a ${1} event with code 0x${2}.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
			"public static void Log${1}(this ILogger logger, Exception? exception = null) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}(logger, exception);",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition with no extra arguments and LogLevel.${3}."
    },
    "Define LoggerMessage w/1 arg": {
        "prefix": "logger-message1",
		"body": [
            "#region ${1:EventName} event logger message (0x${2:HexNumber})",
            "",
			"public const int EVENT_ID_${1} = 0x${2};",
            "",
			"public static readonly EventId ${1} = new(EVENT_ID_${1}, nameof(${1}));",
            "",
			"private static readonly Action<ILogger, ${3:ParamType}, Exception?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/} = LoggerMessage.Define<${3}>(LogLevel.${4:Critical|Error|Warning|Information|Trace|Debug}, ${1},",
			"    \"${5:Message} (${6:Param1}={${6}}).\");",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.${4}\"/> message for a ${1} event with event code 0x${2}.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${7:The event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
			"public static void Log${1}(this ILogger logger, ${3} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}(logger, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition with 1 extra argument and LogLevel.${4}."
    },  
    "Define LoggerMessage w/2 args": {
        "prefix": "logger-message2",
		"body": [
            "#region ${1:EventName} event logger message (0x${2:HexNumber})",
            "",
			"public const int EVENT_ID_${1} = 0x${2};",
            "",
			"public static readonly EventId ${1} = new(EVENT_ID_${1}, nameof(${1}));",
            "",
			"private static readonly Action<ILogger, ${3:ParamType1}, ${4:ParamType2}, Exception?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/} = LoggerMessage.Define<${3}, ${4}>(LogLevel.${5:Critical|Error|Warning|Information|Trace|Debug}, ${1},",
			"    \"${6:Message} (${7:ParamName1}={${7}}; ${8:ParamName2}={${8}}).\");",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.${5}\"/> message for a ${1} event with event code 0x${2}.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${9:The first event parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${10:The second event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
			"public static void Log${1}(this ILogger logger, ${3} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}(logger, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition with 2 extra arguments and LogLevel.${5}."
    },
    "Define LoggerMessage w/3 args": {
        "prefix": "logger-message3",
		"body": [
            "#region ${1:EventName} event logger message (0x${2:HexNumber})",
            "",
			"public const int EVENT_ID_${1} = 0x${2};",
            "",
			"public static readonly EventId ${1} = new(EVENT_ID_${1}, nameof(${1}));",
            "",
			"private static readonly Action<ILogger, ${3:ParamType1}, ${4:ParamType2}, ${5:ParamType3}, Exception?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/} = LoggerMessage.Define<${3}, ${4}, ${5}>(LogLevel.${6:Critical|Error|Warning|Information|Trace|Debug}, ${1},",
			"    \"${7:Message} (${8:ParamName1}={${8}}; ${9:ParamName2}={${9}}; ${10:ParamName3}={${10}}).\");",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.${6}\"/> message for a ${1} event with event code 0x${2}.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The first event parameter.}</param>",
            "/// <param name=\"${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${12:The second event parameter.}</param>",
            "/// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The third event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
			"public static void Log${1}(this ILogger logger, ${3} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}(logger, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition with 3 extra arguments and LogLevel.${6}."
    },
    "Define LoggerMessage w/4 args": {
        "prefix": "logger-message4",
		"body": [
            "#region ${1:EventName} event logger message (0x${2:HexNumber})",
            "",
			"public const int EVENT_ID_${1} = 0x${2};",
            "",
			"public static readonly EventId ${1} = new(EVENT_ID_${1}, nameof(${1}));",
            "",
			"private static readonly Action<ILogger, ${3:ParamType1}, ${4:ParamType2}, ${5:ParamType3}, ${6:ParamType4}, Exception?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/} = LoggerMessage.Define<${3}, ${4}, ${5}, ${6}>(LogLevel.${7:Critical|Error|Warning|Information|Trace|Debug}, ${1},",
			"    \"${8:Message} (${9:ParamName1}={${9}}; ${10:ParamName2}={${10}}; ${11:ParamName3}={${11}}; ${12:ParamName4}={${12}}).\");",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.${7}\"/> message for a ${1} event with event code 0x${2}.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The first event parameter.}</param>",
            "/// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The second event parameter.}</param>",
            "/// <param name=\"${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The third event parameter.}</param>",
            "/// <param name=\"${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The fourth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
			"public static void Log${1}(this ILogger logger, ${3} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5} ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}(logger, ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition with 4 extra arguments and LogLevel.${7}."
    },
    "Define LoggerMessage w/5 args": {
        "prefix": "logger-message5",
		"body": [
            "#region ${1:EventName} event logger message (0x${2:HexNumber})",
            "",
			"public const int EVENT_ID_${1} = 0x${2};",
            "",
			"public static readonly EventId ${1} = new(EVENT_ID_${1}, nameof(${1}));",
            "",
			"private static readonly Action<ILogger, ${3:ParamType1}, ${4:ParamType2}, ${5:ParamType3}, ${6:ParamType4}, ${7:ParamType5}, Exception?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/} = LoggerMessage.Define<${3}, ${4}, ${5}, ${6}, ${7}>(LogLevel.${8:Critical|Error|Warning|Information|Trace|Debug}, ${1},",
			"    \"${9:Message} (${10:ParamName1}={${10}}; ${11:ParamName2}={${11}}; ${12:ParamName3}={${12}}; ${13:ParamName4}={${13}}; ${14:ParamName5}={${14}}).\");",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.${8}\"/> message for a ${1} event with event code 0x${2}.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The first event parameter.}</param>",
            "/// <param name=\"${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The second event parameter.}</param>",
            "/// <param name=\"${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The third event parameter.}</param>",
            "/// <param name=\"${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${18:The fourth event parameter.}</param>",
            "/// <param name=\"${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${19:The fifth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
			"public static void Log${1}(this ILogger logger, ${3} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5} ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7} ${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}(logger, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition with 5 extra arguments and LogLevel.${8}."
    },
    "Define LoggerMessage w/6 args": {
        "prefix": "logger-message6",
		"body": [
            "#region ${1:EventName} event logger message (0x${2:HexNumber})",
            "",
			"public const int EVENT_ID_${1} = 0x${2};",
            "",
			"public static readonly EventId ${1} = new(EVENT_ID_${1}, nameof(${1}));",
            "",
			"private static readonly Action<ILogger, ${3:ParamType1}, ${4:ParamType2}, ${5:ParamType3}, ${6:ParamType4}, ${7:ParamType5}, ${8:ParamType6}, Exception?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/} = LoggerMessage.Define<${3}, ${4}, ${5}, ${6}, ${7}, ${8}>(LogLevel.${9:Critical|Error|Warning|Information|Trace|Debug}, ${1},",
			"    \"${10:Message} (${11:ParamName1}={${11}}; ${12:ParamName2}={${12}}; ${13:ParamName3}={${13}}; ${14:ParamName4}={${14}}; ${15:Param5}={${15}}; ${16:ParamName6}={${16}}).\");",
            "",
            "/// <summary>",
            "/// Logs a <see cref=\"LogLevel.${9}\"/> message for a ${1} event with event code 0x${2}.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The first event parameter.}</param>",
            "/// <param name=\"${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${18:The second event parameter.}</param>",
            "/// <param name=\"${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${19:The third event parameter.}</param>",
            "/// <param name=\"${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${20:The fourth event parameter.}</param>",
            "/// <param name=\"${15/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${21:The fifth event parameter.}</param>",
            "/// <param name=\"${16/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${22:The sixth event parameter.}</param>",
            "/// <param name=\"exception\">The optional exception that caused the event.</param>",
			"public static void Log${1}(this ILogger logger, ${3} ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5} ${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7} ${15/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8} ${16/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? exception = null) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}(logger, ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${15/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${16/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, exception);",
            "",
            "#endregion"
		],
		"description": "Create Logger Message definition with 6 extra arguments and LogLevel.${9}."
    },
    "Define Logger Scope w/no args": {
        "prefix": "logger-scope0",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope(\"${2:Message}\");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger);",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with no extra arguments."
    },
    "Define Logger Scope w/1 arg": {
        "prefix": "logger-scope1",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2>(",
            "    \"${3:Message} ({${4:ParamName}}).\"",
            ");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5:The scope context parameter.}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 1 extra argument."
    },
    "Define Logger Scope w/2 args": {
        "prefix": "logger-scope2",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType1}, ${3:ParamType2}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2, $3>(",
            "   \"${4:Message} (${5:ParamName1}={${5}}; ${6:ParamName2}={${6}}).\"",
            ");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${7:The first scope context parameter.}</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${8:The second scope context parameter.}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${3} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${5/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 2 extra arguments."
    },
    "Define Logger Scope w/3 args": {
        "prefix": "logger-scope3",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType1}, ${3:ParamType2}, ${4:ParamType3}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2, $3, $4>(",
            "   \"${5:Message} (${6:ParamName1}={${6}}; ${7:ParamName2}={${7}}; ${8:ParamName3}={${8}}).\"",
            ");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${9:The first scope context parameter.}</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${10:The second scope context parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The third scope context parameter.}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${3} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${6/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 3 extra arguments."
    },
    "Define Logger Scope w/4 args": {
        "prefix": "logger-scope4",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType1}, ${3:ParamType2}, ${4:ParamType3}, ${5:ParamType4}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2, $3, $4, $5>(",
            "   \"${6:Message} (${7:ParamName1}={${7}}; ${8:ParamName2}={${8}}; ${9:ParamName3}={${9}}; ${10:ParamName4}={${10}}).\"",
            ");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${11:The first scope context parameter.}</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${12:The second scope context parameter.}</param>",
            "/// <param name=\"${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The third scope context parameter.}</param>",
            "/// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The fourth scope context parameter.}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${3} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 4 extra arguments."
    },
    "Define Logger Scope w/5 args": {
        "prefix": "logger-scope5",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType1}, ${3:ParamType2}, ${4:ParamType3}, ${5:ParamType4}, ${6:ParamType5}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2, $3, $4, $5, $6>(",
            "   \"${7:Message} (${8:ParamName1}={${8}}; ${9:ParamName2}={${9}}; ${10:ParamName3}={${10}}; ${11:ParamName3}={${11}}; ${12:ParamName3}={${12}}).\"",
            ");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${13:The first scope context parameter.}</param>",
            "/// <param name=\"${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${14:The second scope context parameter.}</param>",
            "/// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The third scope context parameter.}</param>",
            "/// <param name=\"${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The fourth scope context parameter.}</param>",
            "/// <param name=\"${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The fifth scope context parameter.}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${3} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5} ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${8/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 5 extra arguments."
    },
    "Define Logger Scope w/6 args": {
        "prefix": "logger-scope6",
		"body": [
            "#region ${1:ScopeName} Scope",
            "",
			"private static readonly Func<ILogger, ${2:ParamType1}, ${3:ParamType2}, ${4:ParamType3}, ${5:ParamType4}, ${6:ParamType5}, ${7:ParamType6}, IDisposable?> _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope = LoggerMessage.DefineScope<$2, $3, $4, $5, $7>(",
            "   \"${8:Message} (${9:ParamName1}={${9}}; ${10:ParamName2}={${10}}; ${11:ParamName3}={${11}}; ${12:ParamName4}={${12}}; ${13:ParamName5}={${13}}; ${14:ParamName6}={${14}}).\");",
            "",
            "/// <summary>",
            "/// Formats the ${1} message and creates a scope.",
            "/// </summary>",
            "/// <param name=\"logger\">The current logger.</param>",
            "/// <param name=\"${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${15:The first scope context parameter.}</param>",
            "/// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${16:The second scope context parameter.}</param>",
            "/// <param name=\"${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${17:The third scope context parameter.}</param>",
            "/// <param name=\"${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${18:The fourth scope context parameter.}</param>",
            "/// <param name=\"${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${19:The fifth scope context parameter.}</param>",
            "/// <param name=\"${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${20:The sixth scope context parameter}</param>",
            "/// <returns>A disposable scope object representing the lifetime of the logger scope.</returns>",
			"public static IDisposable? Begin${1}Scope(this ILogger logger, ${2} ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${3} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${4} ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${5} ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7} ${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${8} ${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}) => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}Scope(logger, ${9/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${11/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${12/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${13/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${14/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "#endregion"
		],
		"description": "Create Logger scope definition with 6 extra arguments."
    },
    "Property and backing field": {
        "prefix": "propfull",
        "body": [
            "#region ${1:PropertyName} Property",
            "",
            "private ${2:Type} _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}$0;",
            "",
            "/// <summary>",
            "/// ${3:description}",
            "/// </summary>",
            "public ${2} ${1}",
            "{",
            "\tget => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/};",
            "\tset => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/} = value;",
            "}",
            "",
            "#endregion"
        ],
        "description": "Property and backing field"
    },
    "#pragma warning disable": {
        "prefix": "pragma-warning-disable",
        "body": [
            "#pragma warning disable ${1:Code}",
            "\t${TM_SELECTED_TEXT}$0",
            "#pragma warning restore ${1}"
        ],
        "description": "Disable Warning(s)"
    },
}